Batman Logo
#include <windows.h> // for MS Windows
#include <GL/glut.h> // GLUT, include glu.h and gl.h

/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void display() {
glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Set background color to black and opaque
glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer (background)

// Draw a Red 1x1 Square centered at origin
glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(-2.0f,2.0f);
glVertex2f(-3.0f,1.0f);
glVertex2f(-3.0f,-1.0f);
glVertex2f(-2.0f,-2.0f);
glVertex2f(2.0f,-2.0f);
glVertex2f(3.0f,-1.0f);
glVertex2f(3.0f,1.0f);
glVertex2f(2.0f,2.0f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);
glVertex2f(-1.85f,1.85f);
glVertex2f(-2.85f,0.85f);
glVertex2f(-2.85f,-0.85f);
glVertex2f(-1.85f,-1.85f);
glVertex2f(1.85f,-1.85f);
glVertex2f(2.85f,-0.85f);
glVertex2f(2.85f,0.85f);
glVertex2f(1.85f,1.85f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(-1.5f,1.5f);
glVertex2f(-2.5f,0.5f);
glVertex2f(-2.5f,-0.5f);
glVertex2f(-1.5f,-1.5f);
glVertex2f(1.5f,-1.5f);
glVertex2f(2.5f,-0.5f);
glVertex2f(2.5f,0.5f);
glVertex2f(1.5f,1.5f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(-0.85f,1.4f);
glVertex2f(-1.0f,1.4f);
glVertex2f(-1.0f,0.8f);
glVertex2f(-0.85f,0.8f);
glVertex2f(-0.85f,0.7f);
glVertex2f(-0.5f,0.7f);
glVertex2f(-0.5f,0.8f);
glVertex2f(-0.4f,0.8f);
glVertex2f(-0.4f,1.5f);
glVertex2f(-0.85f,1.5f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(0.85f,1.4f);
glVertex2f(1.0f,1.4f);
glVertex2f(1.0f,0.8f);
glVertex2f(0.85f,0.8f);
glVertex2f(0.85f,0.7f);
glVertex2f(0.5f,0.7f);
glVertex2f(0.5f,0.8f);
glVertex2f(0.4f,0.8f);
glVertex2f(0.4f,1.5f);
glVertex2f(0.85f,1.5f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(-0.4f,1.6f);
glVertex2f(-0.4f,1.5f);
glVertex2f(-0.3f,1.5f);
glVertex2f(-0.3f,1.6f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(0.4f,1.6f);
glVertex2f(0.4f,1.5f);

glVertex2f(0.3f,1.5f);
glVertex2f(0.3f,1.6f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(-1.0f,-1.5f);
glVertex2f(-0.2f,-1.5f);

glVertex2f(-0.2f,-1.3f);
glVertex2f(-1.0f,-1.3f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(-0.8f,-1.3f);
glVertex2f(-0.3f,-1.3f);

glVertex2f(-0.3f,-1.1f);
glVertex2f(-0.8f,-1.1f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(-0.6f,-1.1f);
glVertex2f(-0.4f,-1.1f);

glVertex2f(-0.4f,-0.9f);
glVertex2f(-0.6f,-0.9f);

glEnd();


glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(1.0f,-1.5f);
glVertex2f(0.2f,-1.5f);

glVertex2f(0.2f,-1.3f);
glVertex2f(1.0f,-1.3f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(0.8f,-1.3f);
glVertex2f(0.3f,-1.3f);

glVertex2f(0.3f,-1.1f);
glVertex2f(0.8f,-1.1f);

glEnd();

glBegin(GL_POLYGON);
glColor3ub(255,251,17);

glVertex2f(0.6f,-1.1f);
glVertex2f(0.4f,-1.1f);

glVertex2f(0.4f,-0.9f);
glVertex2f(0.6f,-0.9f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(1.0f,-1.6f);
glVertex2f(1.0f,-1.5f);

glVertex2f(1.2f,-1.5f);
glVertex2f(1.2f,-1.6f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(-1.0f,-1.6f);
glVertex2f(-1.0f,-1.5f);

glVertex2f(-1.2f,-1.5f);
glVertex2f(-1.2f,-1.6f);

glEnd();

glBegin(GL_POLYGON);
//glColor3f(1.0f,0.0f,0.0f);
glColor3ub(3,0,10);
glVertex2f(-0.1f,-1.6f);
glVertex2f(-0.1f,-1.5f);

glVertex2f(0.1f,-1.5f);
glVertex2f(0.1f,-1.6f);

glEnd();

 glFlush(); // Render now
}

/* Main function: GLUT runs as a console application starting at main() */
int main(int argc, char** argv) {
glutInit(&argc, argv); // Initialize GLUT
glutCreateWindow("Lab Task 2");
glutInitWindowSize(1320, 1320); // Create a window with the given title
gluOrtho2D(-4,4,-4,4); // Set the window's initial width & height
glutDisplayFunc(display); // Register display callback handler for window re-paint
glutMainLoop(); // Enter the event-processing loop
return 0;
}
